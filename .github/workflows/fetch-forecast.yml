name: Fetch Met Éireann Forecast

on:
  schedule:
    - cron: '10 0 * * *'   # every day at 00:10 UTC
  workflow_dispatch:        # manual trigger

jobs:
  fetch_forecast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Fetch & Convert Forecasts
        run: |
          mkdir -p forecast_data
          python3 - <<'PY'
          import requests, xml.etree.ElementTree as ET, json, datetime

          # Locations
          locations = {
              "Portsalon": (55.192, -7.633),   # 4th Sep
              "Downings": (55.267, -7.633),   # 5–7 Sep
          }

          # Date ranges
          date_ranges = {
              "Portsalon_4Sep": (datetime.datetime(2025,9,4,11), datetime.datetime(2025,9,4,19)),
              "Downings_5Sep": (datetime.datetime(2025,9,5,11), datetime.datetime(2025,9,5,19)),
              "Downings_6Sep": (datetime.datetime(2025,9,6,11), datetime.datetime(2025,9,6,19)),
              "Downings_7Sep": (datetime.datetime(2025,9,7,7), datetime.datetime(2025,9,7,15)),
          }

          all_forecasts = []

          for label, (start, end) in date_ranges.items():
              loc_name = label.split("_")[0]
              lat, lon = locations[loc_name]

              url = f"http://openaccess.pf.api.met.ie/metno-wdb2ts/locationforecast?lat={lat};long={lon}"
              resp = requests.get(url)
              resp.raise_for_status()

              root = ET.fromstring(resp.content)
              for time_el in root.findall(".//time"):
                  time_str = time_el.attrib.get("from")
                  if not time_str: continue

                  dt = datetime.datetime.fromisoformat(time_str.replace("Z","+00:00")).replace(tzinfo=None)
                  if not (start <= dt <= end): continue

                  loc = time_el.find("location")
                  if loc is None: continue

                  entry = {
                      "group": label,
                      "time": dt.isoformat(),
                  }

                  temp = loc.find("temperature")
                  if temp is not None:
                      entry["Temperature"] = float(temp.attrib.get("value", "0"))

                  winddir = loc.find("windDirection")
                  if winddir is not None:
                      entry["WindDirection"] = float(winddir.attrib.get("deg", "0"))

                  windspeed = loc.find("windSpeed")
                  if windspeed is not None:
                      mps = float(windspeed.attrib.get("mps", "0"))
                      entry["WindSpeed"] = round(mps * 3.6)   # convert to km/h

                  precip = loc.find("precipitation")
                  if precip is not None:
                      entry["Rainfall"] = float(precip.attrib.get("value", "0"))

                  symbol = loc.find("symbol")
                  if symbol is not None:
                      entry["WeatherSymbol3"] = symbol.attrib.get("number")

                  all_forecasts.append(entry)

          # Write JSON with timestamp
          result = {
              "timestamp": datetime.datetime.utcnow().isoformat() + "Z",
              "forecasts": all_forecasts
          }

          with open("forecast_data/forecast.json","w") as f:
              json.dump(result, f, indent=2)
          print(f"Wrote {len(all_forecasts)} entries to forecast.json")
          PY

      - name: Commit forecast.json
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add forecast_data/forecast.json
          git commit -m "Update forecast.json [skip ci]" || echo "No changes"
          git push
