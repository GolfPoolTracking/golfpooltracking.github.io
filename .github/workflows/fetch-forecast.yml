name: Fetch Met Éireann Forecast

on:
  schedule:
    - cron: '0 * * * *'  # Every hour on the hour UTC
  workflow_dispatch:      # Allows manual trigger

jobs:
  fetch_forecast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch Met Éireann XML
        run: |
          mkdir -p forecast_data
          curl -s "http://openaccess.pf.api.met.ie/metno-wdb2ts/locationforecast?lat=55.267;long=-7.633" -o forecast_data/raw_forecast.xml

      - name: Convert XML to JSON
        run: |
          python3 - <<'PY'
          import xml.etree.ElementTree as ET
          import json
          import datetime
          import pytz

          # Load XML
          tree = ET.parse('forecast_data/raw_forecast.xml')
          root = tree.getroot()

          tz = pytz.UTC
          # Adjust date range if needed
          start = datetime.datetime(2025, 8, 28, tzinfo=tz)
          end   = datetime.datetime(2025, 8, 31, 23, 59, tzinfo=tz)

          forecasts = []

          for time_el in root.findall('.//time'):
              time_str = time_el.attrib.get('from')
              if not time_str:
                  continue

              # Parse time with timezone
              dt = datetime.datetime.fromisoformat(time_str.replace('Z', '+00:00'))
              if not (start <= dt <= end):
                  continue

              loc = time_el.find('location')
              if loc is None:
                  continue

              # Determine group based on date
              day = dt.day
              group = None
              if day == 28: group = "Portsalon_28Aug"
              elif day == 29: group = "Downings_29Aug"
              elif day == 30: group = "Downings_30Aug"
              elif day == 31: group = "Downings_31Aug"

              entry = {'group': group, 'time': dt.isoformat()}

              # Temperature
              temp = loc.find('temperature')
              entry['Temperature'] = float(temp.attrib.get('value')) if temp is not None else None

              # Wind
              winddir = loc.find('windDirection')
              entry['WindDirection'] = float(winddir.attrib.get('deg')) if winddir is not None else None
              windspeed = loc.find('windSpeed')
              entry['WindSpeed'] = float(windspeed.attrib.get('mps',0)) * 3.6 if windspeed is not None else None  # convert m/s to km/h

              # Precipitation
              precip = loc.find('precipitation')
              entry['Rainfall'] = float(precip.attrib.get('value', 0)) if precip is not None else 0.0

              # Weather symbol
              symbol = loc.find('symbol')
              entry['WeatherSymbol3'] = symbol.attrib.get('number') if symbol is not None else None

              forecasts.append(entry)

          # Remove duplicates by group + time
          merged = {}
          for f in forecasts:
              key = f['group'] + "_" + f['time']
              merged[key] = f
          forecasts = list(merged.values())

          # Build final JSON
          output = {
              "timestamp": datetime.datetime.now(tz).isoformat(),
              "forecasts": forecasts
          }

          with open('forecast_data/forecast.json','w') as f:
              json.dump(output, f, indent=2)

          print(f"Wrote {len(forecasts)} forecast entries to forecast_data/forecast.json")
          PY

      - name: Commit and push forecast.json
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add forecast_data/forecast.json
          git commit -m "Update forecast.json [skip ci]" || echo "No changes"
          git push
