      - name: Fetch & Convert Forecasts
        run: |
          mkdir -p forecast_data
          python3 - <<'PY'
          import requests, xml.etree.ElementTree as ET, json, datetime

          # Locations and corresponding date ranges
          locations = {
              "Portsalon_28Aug": (55.192, -7.633, datetime.datetime(2025,8,28,11), datetime.datetime(2025,8,28,19)),
              "Downings_29Aug": (55.267, -7.633, datetime.datetime(2025,8,29,11), datetime.datetime(2025,8,29,19)),
              "Downings_30Aug": (55.267, -7.633, datetime.datetime(2025,8,30,11), datetime.datetime(2025,8,30,19)),
              "Downings_31Aug": (55.267, -7.633, datetime.datetime(2025,8,31,7), datetime.datetime(2025,8,31,15))
          }

          all_forecasts = []

          for label, (lat, lon, start, end) in locations.items():
              url = f"http://openaccess.pf.api.met.ie/metno-wdb2ts/locationforecast?lat={lat};long={lon}"
              resp = requests.get(url)
              resp.raise_for_status()
              root = ET.fromstring(resp.content)

              # Use a dict keyed by time to combine multiple measurements into one entry
              time_dict = {}

              for time_el in root.findall(".//time"):
                  time_str = time_el.attrib.get("from")
                  if not time_str:
                      continue
                  dt = datetime.datetime.fromisoformat(time_str.replace("Z","+00:00")).replace(tzinfo=None)
                  if not (start <= dt <= end):
                      continue

                  loc_el = time_el.find("location")
                  if loc_el is None:
                      continue

                  key = dt.isoformat()
                  if key not in time_dict:
                      time_dict[key] = {"group": label, "time": key}

                  entry = time_dict[key]

                  # Temperature
                  temp = loc_el.find("temperature")
                  if temp is not None:
                      entry["Temperature"] = float(temp.attrib.get("value", entry.get("Temperature", 0)))

                  # Wind
                  winddir = loc_el.find("windDirection")
                  if winddir is not None:
                      entry["WindDirection"] = float(winddir.attrib.get("deg", entry.get("WindDirection", 0)))

                  windspeed = loc_el.find("windSpeed")
                  if windspeed is not None:
                      mps = float(windspeed.attrib.get("mps", 0))
                      entry["WindSpeed"] = round(mps * 3.6)  # km/h

                  # Rain
                  precip = loc_el.find("precipitation")
                  if precip is not None:
                      entry["Rainfall"] = float(precip.attrib.get("value", entry.get("Rainfall", 0)))

                  # Symbol
                  symbol = loc_el.find("symbol")
                  if symbol is not None:
                      entry["WeatherSymbol3"] = symbol.attrib.get("number", entry.get("WeatherSymbol3", "1"))

              # Add all combined entries to list
              all_forecasts.extend(time_dict.values())

          # Write JSON with timestamp
          result = {
              "timestamp": datetime.datetime.utcnow().isoformat() + "Z",
              "forecasts": all_forecasts
          }

          with open("forecast_data/forecast.json","w") as f:
              json.dump(result, f, indent=2)
          print(f"Wrote {len(all_forecasts)} forecast entries to forecast.json")
          PY
