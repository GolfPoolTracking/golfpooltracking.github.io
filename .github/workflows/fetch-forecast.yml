name: Update Forecast

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests beautifulsoup4 lxml

      - name: Fetch and process forecast
        run: |
          python - << 'PYCODE'
          import requests, json, os
          from datetime import datetime
          from bs4 import BeautifulSoup

          url = "https://www.met.ie/Open_Data/xml/PointForecasts/55.2670,-7.6330.xml"
          resp = requests.get(url)
          resp.encoding = 'utf-8'

          # Parse malformed XML safely
          soup = BeautifulSoup(resp.text, "lxml-xml")

          forecasts = []
          seen = set()

          for time in soup.find_all("time"):
              ts = time.get("from")
              if not ts or ts in seen:
                  continue
              hour = datetime.fromisoformat(ts.replace("Z","+00:00")).hour
              if not (12 <= hour <= 18):
                  continue
              seen.add(ts)
              loc = time.find("location")
              if loc is None:
                  continue

              entry = {
                  "time": ts,
                  "temperature": float(loc.find("temperature")["value"]) if loc.find("temperature") else None,
                  "windSpeed": float(loc.find("windSpeed")["mps"]) if loc.find("windSpeed") else None,
                  "windDir": loc.find("windDirection")["name"] if loc.find("windDirection") else None,
                  "gust": float(loc.find("windGust")["mps"]) if loc.find("windGust") else None,
                  "humidity": float(loc.find("humidity")["value"]) if loc.find("humidity") else None,
                  "pressure": float(loc.find("pressure")["value"]) if loc.find("pressure") else None,
                  "precipitation": float(loc.find("precipitation")["value"]) if loc.find("precipitation") else 0,
                  "symbol": loc.find("symbol")["id"] if loc.find("symbol") else None
              }
              forecasts.append(entry)

          # Ensure directory exists
          output_file = "SLIM/SLIM2025/forecast.json"
          os.makedirs(os.path.dirname(output_file), exist_ok=True)

          # Write JSON
          with open(output_file, "w") as f:
              json.dump(forecasts, f, indent=2)

          print(f"Saved {len(forecasts)} forecast entries to {output_file}")
          PYCODE

      - name: Commit and push
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add SLIM/SLIM2025/forecast.json
          git commit -m "Update forecast" || echo "No changes"
          git push
