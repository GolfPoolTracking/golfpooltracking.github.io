name: Update Forecast

on:
  schedule:
    - cron: "0 */3 * * *"   # every 3 hours
  workflow_dispatch:        # allow manual trigger

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests

      - name: Fetch & update forecast
        run: |
          cat > update_forecast.py << 'EOF'
import requests
import xml.etree.ElementTree as ET
import json
from datetime import datetime, timedelta, timezone

# Portsalon coordinates
LAT, LON = 55.2670, -7.6330
URL = f"https://metwdb-openaccess.ichec.ie/metno-wdb2ts/locationforecast?lat={LAT}&long={LON}"

try:
    resp = requests.get(URL, timeout=30)
    resp.raise_for_status()
    root = ET.fromstring(resp.content)
except Exception as e:
    print(f"Error fetching/parsing XML: {e}")
    exit(1)

# Merge forecasts by timestamp
forecasts = {}
for time in root.findall(".//time[@datatype='forecast']"):
    from_time = time.attrib.get("from")
    loc = time.find("location")
    if loc is None:
        continue

    if from_time not in forecasts:
        forecasts[from_time] = {
            "time": from_time,
            "temperature": None,
            "windSpeed": None,
            "windDir": None,
            "symbol": None,
            "precipitation": None,
            "humidity": None,
            "pressure": None,
        }

    # Temperature
    temp = loc.find("temperature")
    if temp is not None:
        forecasts[from_time]["temperature"] = float(temp.attrib["value"])

    # Wind
    wind = loc.find("windSpeed")
    if wind is not None:
        forecasts[from_time]["windSpeed"] = float(wind.attrib["mps"])
    wind_dir = loc.find("windDirection")
    if wind_dir is not None:
        forecasts[from_time]["windDir"] = wind_dir.attrib.get("name")

    # Precipitation
    prec = loc.find("precipitation")
    if prec is not None:
        forecasts[from_time]["precipitation"] = float(prec.attrib["value"])

    # Symbol
    sym = loc.find("symbol")
    if sym is not None:
        forecasts[from_time]["symbol"] = sym.attrib.get("id")

    # Humidity
    hum = loc.find("humidity")
    if hum is not None:
        forecasts[from_time]["humidity"] = float(hum.attrib["value"])

    # Pressure
    press = loc.find("pressure")
    if press is not None:
        forecasts[from_time]["pressure"] = float(press.attrib["value"])

# Convert dict → sorted list
forecast_list = []
for ts, data in forecasts.items():
    dt = datetime.fromisoformat(ts.replace("Z", "+00:00"))
    # Convert to Irish Standard Time (UTC+1 in summer, UTC in winter)
    ist = dt.astimezone(timezone(timedelta(hours=1)))
    if 12 <= ist.hour <= 18:  # Filter only between 12–18
        data["localTime"] = ist.strftime("%Y-%m-%d %H:%M")
        forecast_list.append(data)

forecast_list.sort(key=lambda x: x["time"])

# Save to JSON
output_file = "SLIM/SLIM2025/forecast.json"
with open(output_file, "w") as f:
    json.dump(forecast_list, f, indent=2)

print(f"Saved {len(forecast_list)} forecast entries to {output_file}")
EOF
          python update_forecast.py

      - name: Commit and push forecast.json
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add SLIM/SLIM2025/forecast.json
          git commit -m "Update forecast.json [skip ci]" || echo "No changes"
          git push
