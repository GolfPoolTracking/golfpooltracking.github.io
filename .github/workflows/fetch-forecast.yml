name: Fetch Met Éireann Forecast - Aug

on:
  schedule:
    - cron: '0 * * * *'  # every hour on the hour
  workflow_dispatch:

jobs:
  fetch_forecast:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests xmltodict

      - name: Fetch Met Éireann XML for Portsalon
        run: |
          mkdir -p forecast_data
          curl -s "http://openaccess.pf.api.met.ie/metno-wdb2ts/locationforecast?lat=55.2056262;long=-7.6350788" -o forecast_data/raw_portsalon.xml

      - name: Fetch Met Éireann XML for Downings
        run: |
          curl -s "http://openaccess.pf.api.met.ie/metno-wdb2ts/locationforecast?lat=55.1948628;long=-7.8369654" -o forecast_data/raw_downings.xml

      - name: Convert XML to JSON
        run: |
          python3 - <<'PYCODE'
          import xmltodict, json, datetime

          # Configuration for each day/course
          locations = [
            {"file": "forecast_data/raw_portsalon.xml", "group": "Portsalon_28Aug", "date": datetime.date(2025,8,28), "hours": range(7,20)},
            {"file": "forecast_data/raw_downings.xml", "group": "Old Tom Morris_29Aug", "date": datetime.date(2025,8,29), "hours": range(7,20)},
            {"file": "forecast_data/raw_downings.xml", "group": "St Patrick's_30Aug", "date": datetime.date(2025,8,30), "hours": range(7,20)},
            {"file": "forecast_data/raw_downings.xml", "group": "Sandy Hills_31Aug", "date": datetime.date(2025,8,31), "hours": range(7,16)},
          ]

          forecasts = []

          for loc in locations:
              with open(loc["file"]) as f:
                  data = xmltodict.parse(f.read())
                  times = data.get("weatherdata", {}).get("product", {}).get("time", [])
                  if not isinstance(times, list):
                      times = [times]

                  for t in times:
                      time_from = t.get("@from")
                      if not time_from:
                          continue
                      dt = datetime.datetime.fromisoformat(time_from.replace('Z','+00:00'))
                      if dt.date() != loc["date"] or dt.hour not in loc["hours"]:
                          continue

                      loc_data = t.get("location", {})
                      # Build forecast entry
                      entry = {"group": loc["group"], "time": dt.isoformat()}

                      # Temperature
                      temp = loc_data.get("temperature", {})
                      if isinstance(temp, dict):
                          entry["Temperature"] = float(temp.get("@value", "N/A"))

                      # Wind
                      winddir = loc_data.get("windDirection", {})
                      entry["WindDirection"] = float(winddir.get("@deg", "0"))
                      windspd = loc_data.get("windSpeed", {})
                      entry["WindSpeed"] = float(windspd.get("@mps", "0")) * 3.6  # m/s -> km/h

                      # Rain (precipitation)
                      precip = loc_data.get("precipitation", {})
                      if isinstance(precip, dict):
                          entry["Rainfall"] = float(precip.get("@value", "0"))

                      # Weather symbol
                      symbol = loc_data.get("symbol", {})
                      if isinstance(symbol, dict):
                          entry["WeatherSymbol3"] = str(symbol.get("@number", "01"))

                      forecasts.append(entry)

          final = {"timestamp": datetime.datetime.utcnow().isoformat(), "forecasts": forecasts}
          with open("forecast_data/forecast.json","w") as f:
              json.dump(final, f, indent=2)
          print(f"Wrote {len(forecasts)} forecast entries to forecast_data/forecast.json")
          PYCODE

      - name: Commit and push forecast.json
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add forecast_data/forecast.json
          git commit -m "Update forecast.json [skip ci]" || echo "No changes"
          git push
