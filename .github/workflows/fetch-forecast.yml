name: Update Forecast

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *" # every 6 hours

jobs:
  fetch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests xmltodict

      - name: Fetch and process forecast
        run: |
          python - << 'PYCODE'
          import requests, xmltodict, json, re
          from datetime import datetime

          url = "https://www.met.ie/Open_Data/xml/PointForecasts/55.2670,-7.6330.xml"
          resp = requests.get(url)
          resp.encoding = 'utf-8'
          xml_text = resp.text

          # Remove invalid control characters
          xml_text = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F]', '', xml_text)
          # Escape lone &
          xml_text = xml_text.replace('&', '&amp;')

          data = xmltodict.parse(xml_text)

          forecasts = []
          seen = set()

          for time in data["weatherdata"]["product"]["time"]:
              ts = time["@from"]
              hour = datetime.fromisoformat(ts.replace("Z", "+00:00")).hour

              if 12 <= hour <= 18 and ts not in seen:
                  seen.add(ts)
                  loc = time.get("location", {})
                  entry = {
                      "time": ts,
                      "temperature": loc.get("temperature", {}).get("@value"),
                      "windSpeed": loc.get("windSpeed", {}).get("@mps"),
                      "windDir": loc.get("windDirection", {}).get("@name"),
                      "gust": loc.get("windGust", {}).get("@mps"),
                      "humidity": loc.get("humidity", {}).get("@value"),
                      "pressure": loc.get("pressure", {}).get("@value"),
                      "precipitation": loc.get("precipitation", {}).get("@value") if "precipitation" in loc else None,
                      "symbol": loc.get("symbol", {}).get("@id") if "symbol" in loc else None
                  }
                  forecasts.append(entry)

          output_file = "SLIM/SLIM2025/forecast.json"
          with open(output_file, "w") as f:
              json.dump(forecasts, f, indent=2)

          print(f"Saved {len(forecasts)} forecast entries to {output_file}")
          PYCODE

      - name: Commit and push
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add SLIM/SLIM2025/forecast.json
          git commit -m "Update forecast" || echo "No changes"
          git push
