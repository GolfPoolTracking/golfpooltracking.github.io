name: Fetch Met Éireann Forecast

on:
  schedule:
    - cron: '10 0 * * *'  
  workflow_dispatch:

jobs:
  fetch_forecast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch Met Éireann XML
        run: |
          mkdir -p forecast_data
          curl -s "http://openaccess.pf.api.met.ie/metno-wdb2ts/locationforecast?lat=55.267;long=-7.633" -o forecast_data/raw_forecast.xml

      - name: Convert XML to JSON
        run: |
          python3 - <<'PY'
          import xml.etree.ElementTree as ET
          import json
          import datetime
          import hashlib
          import sys

          try:
              tree = ET.parse('forecast_data/raw_forecast.xml')
              root = tree.getroot()
          except Exception as e:
              print("Failed to parse XML:", e)
              sys.exit(1)

          start = datetime.datetime(2025,8,28)
          end   = datetime.datetime(2025,9,1)

          forecasts = {}
          # key: ISO hour string (YYYY-MM-DDTHH:00:00Z)

          for time_el in root.findall('.//time'):
              time_str = time_el.attrib.get('from')
              if not time_str:
                  continue
              dt = datetime.datetime.fromisoformat(time_str.replace('Z','+00:00'))
              dt_naive = dt.replace(tzinfo=None)
              if not (start <= dt_naive < end):
                  continue

              hour_key = dt.strftime('%Y-%m-%dT%H:00:00Z')

              entry = forecasts.get(hour_key, {'time': hour_key})

              for child in time_el:
                  if child.tag == 'location':
                      temp = child.find('temperature')
                      if temp is not None:
                          entry['Temperature'] = temp.attrib.get('value')

                      winddir = child.find('windDirection')
                      if winddir is not None:
                          entry['WindDirection'] = winddir.attrib.get('deg')

                      windspeed = child.find('windSpeed')
                      if windspeed is not None:
                          entry['WindSpeed'] = str(round(float(windspeed.attrib.get('mps')) * 3.6, 1))

                      symbol = child.find('symbol')
                      entry['WeatherSymbol3'] = symbol.attrib.get('number') if symbol is not None else "1"

                  elif child.tag == 'precipitation':
                      entry['Rainfall'] = child.attrib.get('value')

              # Ensure defaults
              entry.setdefault('Temperature', 'N/A')
              entry.setdefault('WindSpeed', '0')
              entry.setdefault('WindDirection', '0')
              entry.setdefault('Rainfall', '0.0')
              entry.setdefault('WeatherSymbol3', '1')

              forecasts[hour_key] = entry

          # Split JSON
          portsalon = [v for k,v in sorted(forecasts.items()) if k.startswith('2025-08-28')]
          downings  = [v for k,v in sorted(forecasts.items()) if k > '2025-08-28']

          def write_if_changed(path, data):
              import os
              try:
                  with open(path,'r') as f:
                      old_hash = hashlib.md5(f.read().encode()).hexdigest()
              except FileNotFoundError:
                  old_hash = None
              new_hash = hashlib.md5(json.dumps(data,sort_keys=True).encode()).hexdigest()
              if old_hash != new_hash:
                  with open(path,'w') as f:
                      json.dump(data,f,indent=2)
                  print(f"Wrote updated {path}")
              else:
                  print(f"No changes for {path}")

          write_if_changed('forecast_data/portsalon.json', portsalon)
          write_if_changed('forecast_data/downings.json', downings)
          PY

      - name: Commit and push forecast.json
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add forecast_data/portsalon.json forecast_data/downings.json
          git commit -m "Update forecast.json [skip ci]" || echo "No changes"
          git push
