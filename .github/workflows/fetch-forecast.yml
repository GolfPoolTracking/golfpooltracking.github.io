name: Fetch Met Éireann Forecast

on:
  schedule:
    - cron: '10 0 * * *'  # daily at 00:10 UTC
  workflow_dispatch:      # allows manual trigger

jobs:
  fetch_forecast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch Met Éireann XML
        run: |
          mkdir -p forecast_data
          curl -s "http://openaccess.pf.api.met.ie/metno-wdb2ts/locationforecast?lat=55.267;long=-7.633" -o forecast_data/raw_forecast.xml

      - name: Convert XML to JSON
        run: |
          python3 - <<'PY'
          import xml.etree.ElementTree as ET
          import json
          import datetime

          tree = ET.parse('forecast_data/raw_forecast.xml')
          root = tree.getroot()

          start = datetime.datetime(2025,8,26,12)  # 12:00
          end   = datetime.datetime(2025,8,26,18)  # 18:00

          forecasts = []
          seen_times = set()

          for time_el in root.findall('.//time'):
              time_str = time_el.attrib.get('from')
              if not time_str or time_str in seen_times:
                  continue
              dt = datetime.datetime.fromisoformat(time_str.replace('Z','+00:00'))
              dt_naive = dt.replace(tzinfo=None)
              if not (start <= dt_naive <= end):
                  continue

              loc = time_el.find('location')
              if loc is None:
                  continue

              entry = {'time': time_str}

              temp = loc.find('temperature')
              if temp is not None:
                  entry['Temperature'] = temp.attrib.get('value')

              winddir = loc.find('windDirection')
              if winddir is not None:
                  entry['WindDirection'] = winddir.attrib.get('deg')

              windspeed = loc.find('windSpeed')
              if windspeed is not None:
                  entry['WindSpeed'] = windspeed.attrib.get('mps')

              precip = loc.find('precipitation')
              if precip is not None:
                  entry['Rainfall'] = precip.attrib.get('value')

              symbol = loc.find('symbol')
              if symbol is not None:
                  entry['WeatherSymbol3'] = symbol.attrib.get('number')

              forecasts.append(entry)
              seen_times.add(time_str)

          # fallback if empty
          if not forecasts:
              forecasts = [{
                  "time": "2025-08-26T12:00:00Z",
                  "Temperature": "N/A",
                  "Rainfall": "0.0",
                  "WindSpeed": "0",
                  "WindDirection": "0",
                  "WeatherSymbol3": "1"
              }]

          with open('forecast_data/forecast.json','w') as f:
              json.dump(forecasts, f, indent=2)
          print(f"Wrote {len(forecasts)} forecast entries to forecast_data/forecast.json")
          PY

      - name: Commit and push forecast.json
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add forecast_data/forecast.json
          git commit -m "Update forecast.json [skip ci]" || echo "No changes"
          git push
