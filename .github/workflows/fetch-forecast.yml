name: SLIM 2025 Forecast (Aug 28–31)

on:
  schedule:
    - cron: "0 * * * *"   # every hour on the hour
  workflow_dispatch:

jobs:
  fetch-weather:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install requests pytz

      - name: Fetch and process weather
        run: |
          import requests
          import json
          from datetime import datetime
          import pytz

          # Locations
          locations = {
              "Portsalon_28Aug": (55.2056262, -7.6350788),
              "Downings_29Aug": (55.1948628, -7.8369654),
              "Downings_30Aug": (55.1948628, -7.8369654),
              "Downings_31Aug": (55.1948628, -7.8369654),
          }

          # Forecast times
          start_dates = {
              "Portsalon_28Aug": "2025-08-28",
              "Downings_29Aug": "2025-08-29",
              "Downings_30Aug": "2025-08-30",
              "Downings_31Aug": "2025-08-31",
          }

          # Ireland timezone
          tz = pytz.timezone("Europe/Dublin")

          all_data = []

          for group, (lat, lon) in locations.items():
              date = start_dates[group]

              # Met.no API
              url = f"https://api.met.no/weatherapi/locationforecast/2.0/classic?lat={lat}&lon={lon}"
              headers = {"User-Agent": "SLIM2025/1.0 github-actions"}
              r = requests.get(url, headers=headers)
              r.raise_for_status()
              data = r.json()

              # Merge entries by time
              merged = {}

              for entry in data["properties"]["timeseries"]:
                  t = entry["time"]
                  dt = datetime.fromisoformat(t.replace("Z", "+00:00"))
                  # Only keep 07:00–19:00 local
                  local = dt.astimezone(tz)
                  if local.hour < 7 or local.hour > 19:
                      continue
                  time_key = local.strftime("%a %d %b %H:%M")

                  details = entry["data"]

                  if time_key not in merged:
                      merged[time_key] = {
                          "group": group,
                          "time": time_key,
                          "Temperature": None,
                          "WindDirection": None,
                          "WindSpeed": None,
                          "Rainfall": None,
                          "WeatherSymbol3": None,
                      }

                  # Instant data (temp, wind, symbol)
                  if "instant" in details and "details" in details["instant"]:
                      inst = details["instant"]["details"]
                      merged[time_key]["Temperature"] = round(inst.get("air_temperature", merged[time_key]["Temperature"] or 0), 1)
                      merged[time_key]["WindDirection"] = inst.get("wind_from_direction", merged[time_key]["WindDirection"])
                      merged[time_key]["WindSpeed"] = round(inst.get("wind_speed", merged[time_key]["WindSpeed"] or 0), 0)

                  # Next-hour forecast (rain, symbol)
                  if "next_1_hours" in details and "details" in details["next_1_hours"]:
                      rain = details["next_1_hours"]["details"].get("precipitation_amount")
                      merged[time_key]["Rainfall"] = rain
                      if "summary" in details["next_1_hours"]:
                          merged[time_key]["WeatherSymbol3"] = details["next_1_hours"]["summary"].get("symbol_code")

              all_data.extend(merged.values())

          output = {
              "timestamp": datetime.now(tz).strftime("%Y-%m-%d %H:%M"),
              "forecasts": all_data,
          }

          import os
          os.makedirs("forecast_data", exist_ok=True)
          with open("forecast_data/forecast.json", "w") as f:
              json.dump(output, f, indent=2)

      - name: Commit forecast.json
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add forecast_data/forecast.json
          git commit -m "Update forecast.json" || echo "No changes"
          git push
