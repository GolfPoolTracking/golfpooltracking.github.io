name: Fetch Met Éireann Forecast

on:
  schedule:
    - cron: '10 0 * * *'  # daily at 00:10 UTC
  workflow_dispatch:      # allows manual trigger

jobs:
  fetch_forecast:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch Met Éireann XML
        run: |
          mkdir -p forecast_data
          curl -s "http://openaccess.pf.api.met.ie/metno-wdb2ts/locationforecast?lat=55.267;long=-7.633" -o forecast_data/raw_forecast.xml

      - name: Convert XML to JSON
        run: |
          python3 - <<'PY'
          import xml.etree.ElementTree as ET
          import json
          import datetime

          tree = ET.parse('forecast_data/raw_forecast.xml')
          root = tree.getroot()

          start = datetime.datetime(2025,8,28)
          end   = datetime.datetime(2025,9,1)

          forecasts = []

          for time_el in root.findall('.//time'):
              time_str = time_el.attrib.get('from')
              if not time_str:
                  continue

              dt = datetime.datetime.fromisoformat(time_str.replace('Z','+00:00'))
              dt_naive = dt.replace(tzinfo=None)
              if not (start <= dt_naive < end):
                  continue

              loc = time_el.find('location')
              if loc is None:
                  continue

              entry = {'time': time_str}

              # Temperature
              temp = loc.find('temperature')
              if temp is not None:
                  entry['Temperature'] = temp.attrib.get('value')

              # Wind
              winddir = loc.find('windDirection')
              if winddir is not None:
                  entry['WindDirection'] = winddir.attrib.get('deg')

              windspeed = loc.find('windSpeed')
              if windspeed is not None:
                  try:
                      mps = float(windspeed.attrib.get('mps', 0))
                      kmh = round(mps * 3.6, 1)
                      entry['WindSpeed'] = kmh
                  except:
                      entry['WindSpeed'] = windspeed.attrib.get('mps')

              # Rainfall (store min/max instead of single value)
              precip = loc.find('precipitation')
              if precip is not None:
                  minv = precip.attrib.get('minvalue')
                  maxv = precip.attrib.get('maxvalue')
                  val  = precip.attrib.get('value')

                  if minv and maxv:
                      entry['Rainfall'] = {
                          "min": float(minv),
                          "max": float(maxv)
                      }
                  elif val:
                      entry['Rainfall'] = float(val)
                  else:
                      entry['Rainfall'] = "N/A"

              # Weather symbol
              symbol = loc.find('symbol')
              if symbol is not None:
                  entry['WeatherSymbol3'] = symbol.attrib.get('number')

              forecasts.append(entry)

          # Fallback if empty
          if not forecasts:
              forecasts = [{
                  "time": "2025-08-28T11:00:00Z",
                  "Temperature": "N/A",
                  "Rainfall": { "min": 0.0, "max": 0.0 },
                  "WindSpeed": "0",
                  "WindDirection": "0",
                  "WeatherSymbol3": "1"
              }]

          with open('forecast_data/forecast.json','w') as f:
              json.dump(forecasts, f, indent=2)

          print(f"Wrote {len(forecasts)} forecast entries to forecast_data/forecast.json")
          PY

      - name: Commit and push forecast.json
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add forecast_data/forecast.json
          git commit -m "Update forecast.json [skip ci]" || echo "No changes"
          git push
